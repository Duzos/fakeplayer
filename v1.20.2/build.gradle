plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3.+" apply false
    id "io.github.juuxel.loom-vineflower" version "1.+" apply false // Vineflower, a better decompiler
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-vineflower"

    loom {
        runs.configureEach {
            vmArg("-Dmixin.debug.export=true")
            vmArg("-Dmixin.env.remapRefMap=true")
            vmArg("-Dmixin.env.refMapRemappingFile=${projectDir}/build/createSrgToMcp/output.srg")
        }
    }
    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        // layered mappings - Mojmap names, parchment and QM docs and parameters
        mappings(loom.layered {
            it.mappings("net.fabricmc:yarn:${yarn_mappings}:v2")
        })

        // see each subproject for dependencies.
    }
    tasks.register("moveBuiltJars", Copy) {
        if (project.name != "common") {
            def remapJar = project.tasks.named('remapJar')
            dependsOn remapJar
            from remapJar
        }

        into(rootProject.file("jars"))
    }
    build.finalizedBy(moveBuiltJars)
}

allprojects {

    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = archives_base_name
    group = maven_group

    version = "v${project.mod_version}-${minecraft_version}"

    repositories {
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    configurations.configureEach {
        resolutionStrategy.eachDependency {
            if (requested.module.name == "fabric-loader") {
                useVersion(fabric_loader_version)
            }
        }
    }
}